**********************************************************************************
  1. Create a cluster on Google Kubernetes Engine(GKE)
**********************************************************************************
   $ gcloud container clusters create hello-hipster --num-nodes 6 --machine-type n1-standard-4 --scopes cloud-platform
   
   $ gcloud config list



**********************************************************************************
  2. Install and setup Istio
**********************************************************************************

    $ cd ~/

    $ export ISTIO_VERSION=1.3.0

    $ curl -L https://git.io/getLatestIstio | sh -

    $ ln -sf istio-$ISTIO_VERSION istio

    $ export PATH=~/istio/bin:$PATH

    $ kubectl create clusterrolebinding cluster-admin-binding --clusterrole=cluster-admin --user="$(gcloud config get-value core/account)"





    **********************************************************************************
    2.1 Let us create a namespace for Istio.
    **********************************************************************************
    $ kubectl create namespace istio-system



    **********************************************************************************
    2.2 Install Istio on our Kubernetes cluster using the provided helm charts from Istio.
    **********************************************************************************
    $ cd istio-1.3.0/

    ###### Install the Istio CRDs
    $ helm template install/kubernetes/helm/istio-init --name istio-init --namespace istio-system | kubectl apply -f -

    ##### Run this to verify all CRDs are installed. It should output 23 for this version of Istio.
    $ kubectl get crds | grep 'istio.io\|certmanager.k8s.io' | wc -l

    ###### Install the Istio demo set up so that we get Grafana, Jaeger & Kiali set up as well.
    $ helm template install/kubernetes/helm/istio --name istio --namespace istio-system     --values install/kubernetes/helm/istio/values-istio-demo.yaml | kubectl apply -f -
  
    ####### Wait for the pods to run, these will be deployed to the istio-system namespace.
    $ kubectl get pods -n istio-system -w


    ######  Get the Ingress gateway service details. This is the only service that is exposed to an external IP.
    $ kubectl get svc istio-ingressgateway -n istio-system

    $ export   INGRESS_IP=$(kubectl -n istio-system get svc istio-ingressgateway -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
 
*********************************************************************************
  3. Generate the application using Jhipster
**********************************************************************************


  Edit the app-istio.jdl to IngerssDomain to pint to $INGRESS_IP
  Also ensure that dockerRepository is pointing to repo for which you have access

  $ jhipster import-jdl app-istio.jdl

  Using Gradel compile and package the Gateway (Frontend) and Microservices into individual docker containers

  $ ./build_n_containerize.sh

  $ ./publishcontainers_to_dockerhub.sh


*********************************************************************************
  4. Deploy using Kubernetes to the cluster
**********************************************************************************
  $ cd kubernetes/

  $ ./kubectl-apply.sh
